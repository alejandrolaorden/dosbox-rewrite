
; 32-bit overrides
opcode 0x66 prefix opsz32:                      ""                          ; Opcode size override (toggle)             01100110
opcode 0x67 prefix addrsz32:                    ""                          ; Address size override (toggle)            01100111

; MOVSX
opcode 0x0F 0xBE mod/reg/rm:                    "MOVSX"b w(reg),b(r/m)      ; Move With Sign Extension                  00001111 1011111w w=0
opcode 0x0F 0xBF mod/reg/rm:                    "MOVSX"w w(reg),w16(r/m)    ; Move With Sign Extension                  00001111 1011111w w=1

; MOVZX
opcode 0x0F 0xB6 mod/reg/rm:                    "MOVZX"b w(reg),b(r/m)      ; Move With Zero Extension                  00001111 1011011w w=0
opcode 0x0F 0xB7 mod/reg/rm:                    "MOVZX"w w(reg),w16(r/m)    ; Move With Zero Extension                  00001111 1011011w w=1

; PUSH/POP FS/GS
opcode 0x0F 0xA0:                               "PUSH"w w(fs)               ; Push                                      00001111 10<reg>000 reg=4
opcode 0x0F 0xA1:                               "POP"w w(fs)                ; Pop                                       00001111 10<reg>001 reg=4
opcode 0x0F 0xA8:                               "PUSH"w w(gs)               ; Push                                      00001111 10<reg>000 reg=5
opcode 0x0F 0xA9:                               "POP"w w(gs)                ; Pop                                       00001111 10<reg>001 reg=5

; LFS/LGS
opcode 0x0F 0xB2 mod/reg/rm:                    "LSS"w w(reg),w(r/m)        ; Load Pointer to SS                        00001111 10110010
opcode 0x0F 0xB4 mod/reg/rm:                    "LFS"w w(reg),w(r/m)        ; Load Pointer to FS                        00001111 10110100
opcode 0x0F 0xB5 mod/reg/rm:                    "LGS"w w(reg),w(r/m)        ; Load Pointer to FS                        00001111 10110101

; ICEBP/INT1
opcode 0xF1:                                    "INT1"                      ; Call interrupt procedure                  11110001

; IMUL
opcode 0x0F 0xAF mod/reg/rm:                    "IMUL"w w(reg),w(r/m)       ; Signed Multiply                           00001111 10101111

; 386-specific
#ifdef CORE_386_LOADALL
opcode 0x0F 0x07:                               "LOADALL386"                ; Undocumented 386 "LOADALL" instruction
#endif

; bit scan/test
opcode 0x0F 0xA3 mod/reg/rm:                    "BT"w w(r/m),w(reg)         ; Bit Test                                  00001111 10100011
opcode 0x0F 0xBA mod/reg/rm /4 ib:              "BT"w w(r/m),i              ; Bit Test                                  00001111 10111010
opcode 0x0F 0xAB mod/reg/rm:                    "BTS"w w(r/m),w(reg)        ; Bit Test and Set                          00001111 10101011
opcode 0x0F 0xBA mod/reg/rm /5 ib:              "BTS"w w(r/m),i             ; Bit Test and Set                          00001111 10111010
opcode 0x0F 0xB3 mod/reg/rm:                    "BTR"w w(r/m),w(reg)        ; Bit Test and Reset                        00001111 10110011
opcode 0x0F 0xBA mod/reg/rm /6 ib:              "BTR"w w(r/m),i             ; Bit Test and Reset                        00001111 10111010
opcode 0x0F 0xBB mod/reg/rm:                    "BTC"w w(r/m),w(reg)        ; Bit Test and Complement                   00001111 10111011
opcode 0x0F 0xBA mod/reg/rm /7 ib:              "BTC"w w(r/m),i             ; Bit Test and Complement                   00001111 10111010
opcode 0x0F 0xBC mod/reg/rm:                    "BSF"w w(reg),w(r/m)        ; Bit Scan Forward                          00001111 10111100
opcode 0x0F 0xBD mod/reg/rm:                    "BSR"w w(reg),w(r/m)        ; Bit Scan Reverse                          00001111 10111101

; JMP conditional (near)
opcode 0x0F 0x80 iws:                           "JO" w(i+ip)                ; Jump on Overflow                          00001111 10000000
opcode 0x0F 0x81 iws:                           "JNO" w(i+ip)               ; Jump on Not Overflow                      00001111 10000001
opcode 0x0F 0x82 iws:                           "JB" w(i+ip)                ; Jump on Below, Not (Above or Equal)       00001111 10000010
opcode 0x0F 0x83 iws:                           "JNB" w(i+ip)               ; Jump on Not Below (Above or Equal)        00001111 10000011
opcode 0x0F 0x84 iws:                           "JZ" w(i+ip)                ; Jump on Zero/Equal                        00001111 10000100
opcode 0x0F 0x85 iws:                           "JNZ" w(i+ip)               ; Jump on Not Zero/Equal                    00001111 10000101
opcode 0x0F 0x86 iws:                           "JBE" w(i+ip)               ; Jump on Below or Equal                    00001111 10000110
opcode 0x0F 0x87 iws:                           "JA" w(i+ip)                ; Jump on Above                             00001111 10000111
opcode 0x0F 0x88 iws:                           "JS" w(i+ip)                ; Jump on Sign                              00001111 10001000
opcode 0x0F 0x89 iws:                           "JNS" w(i+ip)               ; Jump on Not Sign                          00001111 10001001
opcode 0x0F 0x8A iws:                           "JPE" w(i+ip)               ; Jump on Parity/Parity Even                00001111 10001010
opcode 0x0F 0x8B iws:                           "JPO" w(i+ip)               ; Jump on Not Parity/Parity Odd             00001111 10001011
opcode 0x0F 0x8C iws:                           "JL" w(i+ip)                ; Jump on Less than                         00001111 10001100
opcode 0x0F 0x8D iws:                           "JGE" w(i+ip)               ; Jump on Greater Than                      00001111 10001101
opcode 0x0F 0x8E iws:                           "JLE" w(i+ip)               ; Jump on Less Than or Equal                00001111 10001110
opcode 0x0F 0x8F iws:                           "JG" w(i+ip)                ; Jump on Greater Than                      00001111 10001111

; MOV control registers
opcode 0x0F 0x20 mod/reg/rm mod==3:             "MOV"w w32(r/m),cr(reg)     ; Move to Control Register                  00001111 00100000
opcode 0x0F 0x22 mod/reg/rm mod==3:             "MOV"w cr(reg),w32(r/m)     ; Move from Control Register                00001111 00100010
opcode 0x0F 0x21 mod/reg/rm mod==3:             "MOV"w w32(r/m),dr(reg)     ; Move to Debug Register                    00001111 00100001
opcode 0x0F 0x23 mod/reg/rm mod==3:             "MOV"w dr(reg),w32(r/m)     ; Move from Debug Register                  00001111 00100011
#if CORE86 < 5 /* The test registers TR6..TR7 and below only exist on 386 and 486 */
opcode 0x0F 0x24 mod/reg/rm mod==3:             "MOV"w w32(r/m),tr(reg)     ; Move to Test Register                     00001111 00100100
opcode 0x0F 0x26 mod/reg/rm mod==3:             "MOV"w tr(reg),w32(r/m)     ; Move from Test Register                   00001111 00100110
#endif

; SETcc
opcode 0x0F 0x90 mod/reg/rm:                    "SETO" b(r/m)               ; Set on Overflow                           00001111 10010000
opcode 0x0F 0x91 mod/reg/rm:                    "SETNO" b(r/m)              ; Set on Not Overflow                       00001111 10010001
opcode 0x0F 0x92 mod/reg/rm:                    "SETB" b(r/m)               ; Set on Below, Not (Above or Equal)        00001111 10010010
opcode 0x0F 0x93 mod/reg/rm:                    "SETNB" b(r/m)              ; Set on Not Below (Above or Equal)         00001111 10010011
opcode 0x0F 0x94 mod/reg/rm:                    "SETZ" b(r/m)               ; Set on Zero/Equal                         00001111 10010100
opcode 0x0F 0x95 mod/reg/rm:                    "SETNZ" b(r/m)              ; Set on Not Zero/Equal                     00001111 10010101
opcode 0x0F 0x96 mod/reg/rm:                    "SETBE" b(r/m)              ; Set on Below or Equal                     00001111 10010110
opcode 0x0F 0x97 mod/reg/rm:                    "SETA" b(r/m)               ; Set on Above                              00001111 10010111
opcode 0x0F 0x98 mod/reg/rm:                    "SETS" b(r/m)               ; Set on Sign                               00001111 10011000
opcode 0x0F 0x99 mod/reg/rm:                    "SETNS" b(r/m)              ; Set on Not Sign                           00001111 10011001
opcode 0x0F 0x9A mod/reg/rm:                    "SETPE" b(r/m)              ; Set on Parity/Parity Even                 00001111 10011010
opcode 0x0F 0x9B mod/reg/rm:                    "SETPO" b(r/m)              ; Set on Not Parity/Parity Odd              00001111 10011011
opcode 0x0F 0x9C mod/reg/rm:                    "SETL" b(r/m)               ; Set on Less than                          00001111 10011100
opcode 0x0F 0x9D mod/reg/rm:                    "SETGE" b(r/m)              ; Set on Greater Than                       00001111 10011101
opcode 0x0F 0x9E mod/reg/rm:                    "SETLE" b(r/m)              ; Set on Less Than or Equal                 00001111 10011110
opcode 0x0F 0x9F mod/reg/rm:                    "SETG" b(r/m)               ; Set on Greater Than                       00001111 10011111

; SHLD/SHRD
opcode 0x0F 0xA4 mod/reg/rm ib:                 "SHLD"w w(r/m),w(reg),i     ; Double Precision Shift Left               00001111 10100100
opcode 0x0F 0xA5 mod/reg/rm:                    "SHLD"w w(r/m),w(reg),b(c)  ; Double Precision Shift Left               00001111 10100101
opcode 0x0F 0xAC mod/reg/rm ib:                 "SHRD"w w(r/m),w(reg),i     ; Double Precision Shift Right              00001111 10101100
opcode 0x0F 0xAD mod/reg/rm:                    "SHRD"w w(r/m),w(reg),b(c)  ; Double Precision Shift Right              00001111 10101101

; RSM
opcode 0x0F 0xAA:                               "RSM"                       ; Resume from System Management Mode        00001111 10101010

; UMOV (80386/80486 only)
#if defined(CORE_UMOV) && CORE86 >= 3 && CORE86 <= 4
opcode 0x0F 0x10 mod/reg/rm:                    "UMOV" b(r/m),b(reg)        ; 
opcode 0x0F 0x11 mod/reg/rm:                    "UMOV" w(r/m),w(reg)        ; 
opcode 0x0F 0x12 mod/reg/rm:                    "UMOV" b(reg),b(r/m)        ; 
opcode 0x0F 0x13 mod/reg/rm:                    "UMOV" w(reg),w(r/m)        ; 
#endif

#if defined(IBTS_EARLY_386) && CORE86 == 3
opcode 0x0F 0xA6 mod/reg/rm:                    "XBTS" w(reg),w(r/m),b(c)   ; 
opcode 0x0F 0xA7 mod/reg/rm:                    "IBTS" w(r/m),w(reg),b(c)   ; 
#endif

