; References:
;    Intel 8088 datasheet, 8086/8088 Instruction Set Summary

; AAA/AAS
opcode 0x37:                                    "AAA"b                      ; ASCII Adjust for Add                      00110111
opcode 0x3F:                                    "AAS"b                      ; ASCII Adjust for Subtract                 00111111

; AAM/AAD
opcode 0xD4 ib:                                 "AAM"b i                    ; ASCII Adjust for Multiply                 11010100
opcode 0xD5 ib:                                 "AAD"b i                    ; ASCII Adjust for Divide                   11010101

; ADC Add with Carry
opcode 0x10 mod/reg/rm:                         "ADC"b b(r/m),b(reg)        ; Reg/Memory with Register to Either        000100dw d=0 w=0
opcode 0x11 mod/reg/rm:                         "ADC"w w(r/m),w(reg)        ; Reg/Memory with Register to Either        000100dw d=0 w=1
opcode 0x12 mod/reg/rm:                         "ADC"b b(reg),b(r/m)        ; Reg/Memory with Register to Either        000100dw d=1 w=0
opcode 0x13 mod/reg/rm:                         "ADC"w w(reg),w(r/m)        ; Reg/Memory with Register to Either        000100dw d=1 w=1
opcode 0x14 ib:                                 "ADC"b b(a),i               ; Immediate to Accumulator                  0001010w w=0
opcode 0x15 iw:                                 "ADC"w w(a),i               ; Immediate to Accumulator                  0001010w w=1
opcode 0x80 mod/reg/rm /2 ib:                   "ADC"b b(r/m),i             ; Immediate to Register/Memory              100000sw s=0 w=0
opcode 0x81 mod/reg/rm /2 iw:                   "ADC"w w(r/m),i             ; Immediate to Register/Memory              100000sw s=0 w=1
opcode 0x82 mod/reg/rm /2 ib:                   "ADC"b b(r/m),i             ; Immediate to Register/Memory              100000sw s=1 w=0
opcode 0x83 mod/reg/rm /2 ibs:                  "ADC"w w(r/m),i             ; Immediate to Register/Memory              100000sw s=1 w=1

; ADD
opcode 0x00 mod/reg/rm:                         "ADD"b b(r/m),b(reg)        ; Reg/Memory with Register to Either        000000dw d=0 w=0
opcode 0x01 mod/reg/rm:                         "ADD"w w(r/m),w(reg)        ; Reg/Memory with Register to Either        000000dw d=0 w=1
opcode 0x02 mod/reg/rm:                         "ADD"b b(reg),b(r/m)        ; Reg/Memory with Register to Either        000000dw d=1 w=0
opcode 0x03 mod/reg/rm:                         "ADD"w w(reg),w(r/m)        ; Reg/Memory with Register to Either        000000dw d=1 w=1
opcode 0x04 ib:                                 "ADD"b b(a),i               ; Immediate to Accumulator                  0000010w w=0
opcode 0x05 iw:                                 "ADD"w w(a),i               ; Immediate to Accumulator                  0000010w w=1
opcode 0x80 mod/reg/rm /0 ib:                   "ADD"b b(r/m),i             ; Immediate to Register/Memory              100000sw s=0 w=0
opcode 0x81 mod/reg/rm /0 iw:                   "ADD"w w(r/m),i             ; Immediate to Register/Memory              100000sw s=0 w=1
opcode 0x82 mod/reg/rm /0 ib:                   "ADD"b b(r/m),i             ; Immediate to Register/Memory              100000sw s=1 w=0
opcode 0x83 mod/reg/rm /0 ibs:                  "ADD"w w(r/m),i             ; Immediate to Register/Memory              100000sw s=1 w=1

; AND
opcode 0x20 mod/reg/rm:                         "AND"b b(r/m),b(reg)        ; Reg/Memory with Register to Either        001000dw d=0 w=0
opcode 0x21 mod/reg/rm:                         "AND"w w(r/m),w(reg)        ; Reg/Memory with Register to Either        001000dw d=0 w=1
opcode 0x22 mod/reg/rm:                         "AND"b b(reg),b(r/m)        ; Reg/Memory with Register to Either        001000dw d=1 w=0
opcode 0x23 mod/reg/rm:                         "AND"w w(reg),w(r/m)        ; Reg/Memory with Register to Either        001000dw d=1 w=1
opcode 0x24 ib:                                 "AND"b b(a),i               ; Immediate to Accumulator                  0010010w w=0
opcode 0x25 iw:                                 "AND"w w(a),i               ; Immediate to Accumulator                  0010010w w=1
opcode 0x80 mod/reg/rm /4 ib:                   "AND"b b(r/m),i             ; Immediate to Register/Memory              100000sw s=0 w=0
opcode 0x81 mod/reg/rm /4 iw:                   "AND"w w(r/m),i             ; Immediate to Register/Memory              100000sw s=0 w=1
opcode 0x82 mod/reg/rm /4 ib:                   "AND"b b(r/m),i             ; Immediate to Register/Memory              100000sw s=1 w=0
opcode 0x83 mod/reg/rm /4 ibs:                  "AND"w w(r/m),i             ; Immediate to Register/Memory              100000sw s=1 w=1

; CALL
opcode 0xE8 iws:                                "CALL"w w(i+ip)             ; Direct Within Segment                     11101000
opcode 0xFF mod/reg/rm /2:                      "CALL"w w(r/m)              ; Indirect Within Segment                   11111111 reg=2
opcode 0x9A iw iw16:                            "CALLF"w w(i2),w(i)         ; Direct Intersegment                       10011010
opcode 0xFF mod/reg/rm /3:                      "CALLF"w w(r/m)             ; Indirect Intersegment                     11111111 reg=3

; CBW
opcode 0x98:                                    "CBW"b                      ; Convert Byte to Word                      10011000

; CWD
opcode 0x99:                                    "CWD"w                      ; Convert Word to Double Word               10011001

; CMP
opcode 0x38 mod/reg/rm:                         "CMP"b b(r/m),b(reg)        ; Reg/Memory with Register to Either        001110dw d=0 w=0
opcode 0x39 mod/reg/rm:                         "CMP"w w(r/m),w(reg)        ; Reg/Memory with Register to Either        001110dw d=0 w=1
opcode 0x3A mod/reg/rm:                         "CMP"b b(reg),b(r/m)        ; Reg/Memory with Register to Either        001110dw d=1 w=0
opcode 0x3B mod/reg/rm:                         "CMP"w w(reg),w(r/m)        ; Reg/Memory with Register to Either        001110dw d=1 w=1
opcode 0x3C ib:                                 "CMP"b b(a),i               ; Immediate to Accumulator                  0011110w w=0
opcode 0x3D iw:                                 "CMP"w w(a),i               ; Immediate to Accumulator                  0011110w w=1
opcode 0x80 mod/reg/rm /7 ib:                   "CMP"b b(r/m),i             ; Immediate to Register/Memory              100000sw s=0 w=0
opcode 0x81 mod/reg/rm /7 iw:                   "CMP"w w(r/m),i             ; Immediate to Register/Memory              100000sw s=0 w=1
opcode 0x82 mod/reg/rm /7 ib:                   "CMP"b b(r/m),i             ; Immediate to Register/Memory              100000sw s=1 w=0
opcode 0x83 mod/reg/rm /7 ibs:                  "CMP"w w(r/m),i             ; Immediate to Register/Memory              100000sw s=1 w=1

; DAA/DAS
opcode 0x27:                                    "DAA"b                      ; Decimal Adjust for Add                    00100111
opcode 0x2F:                                    "DAS"b                      ; Decimal Adjust for Subtract               00101111

; DEC
opcode range(0x48,0x4F) reg=op02:               "DEC"w w(reg)               ; Register                                  01001<reg> reg=0-7
opcode 0xFE mod/reg/rm /1:                      "DEC"b b(r/m)               ; Register/Memory                           1111111w w=0
opcode 0xFF mod/reg/rm /1:                      "DEC"w w(r/m)               ; Register/Memory                           1111111w w=1

; OTHER
opcode 0xF4:                                    "HLT"                       ; Halt                                      11110100
opcode 0xF5:                                    "CMC"                       ; Complement Carry                          11110101
opcode 0xF8:                                    "CLC"                       ; Clear Carry                               11111000
opcode 0xF9:                                    "STC"                       ; Set Carry                                 11111001
opcode 0xFA:                                    "CLI"                       ; Clear Interrupt                           11111010
opcode 0xFB:                                    "STI"                       ; Set Interrupt                             11111011
opcode 0xFC:                                    "CLD"                       ; Clear Direction                           11111100
opcode 0xFD:                                    "STD"                       ; Set Direction                             11111101

; INC
opcode range(0x40,0x47) reg=op02:               "INC"w w(reg)               ; Register                                  01000<reg> reg=0-7
opcode 0xFE mod/reg/rm /0:                      "INC"b b(r/m)               ; Register/Memory                           1111111w w=0
opcode 0xFF mod/reg/rm /0:                      "INC"w w(r/m)               ; Register/Memory                           1111111w w=1

; INT and interrupts
opcode 0xCC:                                    "INT3"w                     ; Type 3 (DEBUG)                            11001100
opcode 0xCD ib:                                 "INT"w i                    ; Type Specified                            11001101
opcode 0xCE:                                    "INTO"w                     ; Interrupt on Overflow                     11001110
opcode 0xCF:                                    "IRET"w                     ; Interrupt Return                          11001111

#ifdef CORE_8086_JMP_ALIAS
; JMP conditional (8088 only known alias of 0x70-0x7F)
opcode 0x60 ibs:                                "JO" w(i+ip)
opcode 0x61 ibs:                                "JNO" w(i+ip)
opcode 0x62 ibs:                                "JB" w(i+ip)
opcode 0x63 ibs:                                "JNB" w(i+ip)
opcode 0x64 ibs:                                "JZ" w(i+ip)
opcode 0x65 ibs:                                "JNZ" w(i+ip)
opcode 0x66 ibs:                                "JBE" w(i+ip)
opcode 0x67 ibs:                                "JA" w(i+ip)
opcode 0x68 ibs:                                "JS" w(i+ip)
opcode 0x69 ibs:                                "JNS" w(i+ip)
opcode 0x6A ibs:                                "JPE" w(i+ip)
opcode 0x6B ibs:                                "JPO" w(i+ip)
opcode 0x6C ibs:                                "JL" w(i+ip)
opcode 0x6D ibs:                                "JGE" w(i+ip)
opcode 0x6E ibs:                                "JLE" w(i+ip)
opcode 0x6F ibs:                                "JG" w(i+ip)
#endif

; JMP conditional
opcode 0x70 ibs:                                "JO" w(i+ip)                ; Jump on Overflow                          01110000
opcode 0x71 ibs:                                "JNO" w(i+ip)               ; Jump on Not Overflow                      01110001
opcode 0x72 ibs:                                "JB" w(i+ip)                ; Jump on Below, Not (Above or Equal)       01110010
opcode 0x73 ibs:                                "JNB" w(i+ip)               ; Jump on Not Below (Above or Equal)        01110011
opcode 0x74 ibs:                                "JZ" w(i+ip)                ; Jump on Zero/Equal                        01110100
opcode 0x75 ibs:                                "JNZ" w(i+ip)               ; Jump on Not Zero/Equal                    01110101
opcode 0x76 ibs:                                "JBE" w(i+ip)               ; Jump on Below or Equal                    01110110
opcode 0x77 ibs:                                "JA" w(i+ip)                ; Jump on Above                             01110111
opcode 0x78 ibs:                                "JS" w(i+ip)                ; Jump on Sign                              01111000
opcode 0x79 ibs:                                "JNS" w(i+ip)               ; Jump on Not Sign                          01111001
opcode 0x7A ibs:                                "JPE" w(i+ip)               ; Jump on Parity/Parity Even                01111010
opcode 0x7B ibs:                                "JPO" w(i+ip)               ; Jump on Not Parity/Parity Odd             01111011
opcode 0x7C ibs:                                "JL" w(i+ip)                ; Jump on Less than                         01111100
opcode 0x7D ibs:                                "JGE" w(i+ip)               ; Jump on Greater Than                      01111101
opcode 0x7E ibs:                                "JLE" w(i+ip)               ; Jump on Less Than or Equal                01111110
opcode 0x7F ibs:                                "JG" w(i+ip)                ; Jump on Greater Than                      01111111
opcode 0xE0 ibs:                                "LOOPNZ"w w(i+ip)           ; Loop CX times                             11100000
opcode 0xE1 ibs:                                "LOOPZ"w w(i+ip)            ; Loop while Zero/Equal (ZF=1)              11100001
opcode 0xE2 ibs:                                "LOOP"w w(i+ip)             ; Loop while Not Zero/Not Equal (ZF=0)      11100010
opcode 0xE3 ibs:                                "JCXZ"w w(i+ip)             ; Jump on CX == 0                           11100011

; JMP unconditional
opcode 0xE9 iws:                                "JMP"w w(i+ip)              ; Direct Within Segment                     11101001
opcode 0xEB ibs:                                "JMP"w w(i+ip)              ; Direct Within Segment - Short             11101011
opcode 0xFF mod/reg/rm /4:                      "JMP"w w(r/m)               ; Indirect Within Segment                   11111111 reg=4
opcode 0xEA iw iw16:                            "JMPF"w w(i2),w(i)          ; Direct Intersegment                       11101010
opcode 0xFF mod/reg/rm /5:                      "JMPF"w w(r/m)              ; Indirect Intersegment                     11111111 reg=5

; LAHF
opcode 0x9F:                                    "LAHF"b                     ; Load AH with Flags                        10011111
opcode 0x9E:                                    "SAHF"b                     ; Store AH into Flags                       10011110

; LEA
opcode 0x8D mod/reg/rm:                         "LEA"w w(reg),w(r/m)        ; Load EA (effective address) to Register   10001101
emucode:                                        if (@codewidth@ == 32) *(cpuref_regs_32[@reg@]) = (uint32_t)(@disp@);
emucode:                                        else if (@codewidth@ == 16) *(cpuref_regs_16[@reg@]) = (uint16_t)(@disp@);

#ifdef CORE_VEX_ENCODING
; LDS/LES leaving mod==3 open for VEX encoding
opcode 0xC4 mod/reg/rm mod!=3:                  "LES"w w(reg),w(r/m)        ; Load Pointer to ES                        11000100
opcode 0xC5 mod/reg/rm mod!=3:                  "LDS"w w(reg),w(r/m)        ; Load Pointer to DS                        11000101
#else
; LDS/LES
opcode 0xC4 mod/reg/rm:                         "LES"w w(reg),w(r/m)        ; Load Pointer to ES                        11000100
opcode 0xC5 mod/reg/rm:                         "LDS"w w(reg),w(r/m)        ; Load Pointer to DS                        11000101
#endif

#ifdef CORE_8086_LOCK_ALIAS
; LOCK (8086 alias)
opcode 0xF1 prefix:                             "LOCK"
#endif
; LOCK
opcode 0xF0 prefix:                             "LOCK"                      ; Bus Lock Prefix                           11110000

; MOV
opcode 0x88 mod/reg/rm:                         "MOV"b b(r/m),b(reg)        ; Register to Register/Memory               100010dw d=0 w=0
opcode 0x89 mod/reg/rm:                         "MOV"w w(r/m),w(reg)        ; Register to Register/Memory               100010dw d=0 w=1
opcode 0x8A mod/reg/rm:                         "MOV"b b(reg),b(r/m)        ; Register/Memory to Register               100010dw d=1 w=0
opcode 0x8B mod/reg/rm:                         "MOV"w w(reg),w(r/m)        ; Register/Memory to Register               100010dw d=1 w=1
opcode 0xA0 iwa:                                "MOV"b b(a),b(mem[i])       ; Memory to Accumulator                     1010000w w=0
opcode 0xA1 iwa:                                "MOV"w w(a),w(mem[i])       ; Memory to Accumulator                     1010000w w=1
opcode 0xA2 iwa:                                "MOV"b b(mem[i]),b(a)       ; Accumulator to Memory                     1010001w w=0
opcode 0xA3 iwa:                                "MOV"w b(mem[i]),w(a)       ; Accumulator to Memory                     1010001w w=1
opcode range(0xB0,0xB7) ib reg=op02:            "MOV"b b(reg),i             ; Immediate to Register                     1011wreg w=0 reg=0-7
emucode:                                        *(cpuref_regs_8[@reg@]) = (uint8_t)(@i@);
opcode range(0xB8,0xBF) iw reg=op02:            "MOV"w w(reg),i             ; Immediate to Register                     1011wreg w=1 reg=0-7
emucode:                                        if (@codewidth@ == 32) *(cpuref_regs_32[@reg@]) = (uint32_t)(@i@);
emucode:                                        else if (@codewidth@ == 16) *(cpuref_regs_16[@reg@]) = (uint16_t)(@i@);
opcode 0xC6 mod/reg/rm /0 ib:                   "MOV"b b(r/m),i             ; Immediate to Register/Memory              1100011w w=0 reg=0
opcode 0xC7 mod/reg/rm /0 iw:                   "MOV"w w(r/m),i             ; Immediate to Register/Memory              1100011w w=1 reg=0
; MOV sreg
opcode 0x8C mod/reg/rm:                         "MOV"w w(r/m),seg(reg)      ; Segment Register to Register/Memory       10001100
opcode 0x8E mod/reg/rm:                         "MOV"w seg(reg),w(r/m)      ; Register/Memory to Segment Register       10001110

; OR
opcode 0x08 mod/reg/rm:                         "OR"b b(r/m),b(reg)         ; Reg/Memory with Register to Either        000010dw d=0 w=0
opcode 0x09 mod/reg/rm:                         "OR"w w(r/m),w(reg)         ; Reg/Memory with Register to Either        000010dw d=0 w=1
opcode 0x0A mod/reg/rm:                         "OR"b b(reg),b(r/m)         ; Reg/Memory with Register to Either        000010dw d=1 w=0
opcode 0x0B mod/reg/rm:                         "OR"w w(reg),w(r/m)         ; Reg/Memory with Register to Either        000010dw d=1 w=1
opcode 0x0C ib:                                 "OR"b b(a),i                ; Immediate to Accumulator                  0000110w w=0
opcode 0x0D iw:                                 "OR"w w(a),i                ; Immediate to Accumulator                  0000110w w=1
opcode 0x80 mod/reg/rm /1 ib:                   "OR"b b(r/m),i              ; Immediate to Register/Memory              100000sw s=0 w=0
opcode 0x81 mod/reg/rm /1 iw:                   "OR"w w(r/m),i              ; Immediate to Register/Memory              100000sw s=0 w=1
opcode 0x82 mod/reg/rm /1 ib:                   "OR"b b(r/m),i              ; Immediate to Register/Memory              100000sw s=1 w=0
opcode 0x83 mod/reg/rm /1 ibs:                  "OR"w w(r/m),i              ; Immediate to Register/Memory              100000sw s=1 w=1

; I/O
opcode 0xE4 ib:                                 "IN"b b(a),i                ; Fixed port                                1110010w w=0
opcode 0xE5 ib:                                 "IN"w w(a),i                ; Fixed port                                1110010w w=1
opcode 0xE6 ib:                                 "OUT"b i,b(a)               ; Fixed port                                1110011w w=0
opcode 0xE7 ib:                                 "OUT"w i,w(a)               ; Fixed port                                1110011w w=1
opcode 0xEC:                                    "IN"b b(a),w16(d)           ; Variable port                             1110110w w=0
opcode 0xED:                                    "IN"w w(a),w16(d)           ; Variable port                             1110110w w=1
opcode 0xEE:                                    "OUT"b w16(d),b(a)          ; Variable port                             1110111w w=0
opcode 0xEF:                                    "OUT"w w16(d),w(a)          ; Variable port                             1110111w w=1

; PUSH
opcode 0x06:                                    "PUSH"w w(es)               ; Segment Register                          000<reg>110 reg=0
opcode 0x0E:                                    "PUSH"w w(cs)               ; Segment Register                          000<reg>110 reg=1
opcode 0x16:                                    "PUSH"w w(ss)               ; Segment Register                          000<reg>110 reg=2
opcode 0x1E:                                    "PUSH"w w(ds)               ; Segment Register                          000<reg>110 reg=3
opcode range(0x50,0x57) reg=op02:               "PUSH"w w(reg)              ; Register                                  01010<reg> reg=0-7
opcode 0xFF mod/reg/rm /6:                      "PUSH"w w(r/m)              ; Register/Memory                           11111111 <mod/reg/rm> reg=110
; POP
opcode 0x07:                                    "POP"w w(es)                ; Segment Register                          000<reg>111 reg=0
#ifdef CORE_8086_POP_CS
opcode 0x0F:                                    "POP"w w(cs)                ; Segment Register                          000<reg>111 reg=1
#endif
opcode 0x17:                                    "POP"w w(ss)                ; Segment Register                          000<reg>111 reg=2
opcode 0x1F:                                    "POP"w w(ds)                ; Segment Register                          000<reg>111 reg=3
opcode range(0x58,0x5F) reg=op02:               "POP"w w(reg)               ; Register                                  01011<reg> reg=0-7
#ifdef CORE_XOP_ENCODING
opcode 0x8F mod/reg/rm mod!=3:                  "POP"w w(r/m)               ; Register/Memory                           10001111 <mod/reg/rm> reg=000
#else
opcode 0x8F mod/reg/rm:                         "POP"w w(r/m)               ; Register/Memory                           10001111 <mod/reg/rm> reg=000
#endif

; push/pop flags
opcode 0x9C:                                    "PUSHF"w                    ; Push Flags                                10011100
opcode 0x9D:                                    "POPF"w                     ; Pop Flags                                 10011101

; REPxxx
opcode 0xF2 prefix:                             "REPNZ"                     ; Repeat (while ZF=0)                       1111001z z=0
opcode 0xF3 prefix:                             "REPZ"                      ; Repeat (while ZF=1)                       1111001z z=1

#ifdef CORE_8086_RET_ALIAS
; RET (8086 alias of C2-C3)
opcode 0xC0 iw16:                               "RET"w i
opcode 0xC1:                                    "RET"w
#endif
; RET Return from Call
opcode 0xC2 iw16:                               "RET"w i                    ; Within Segment Adding Immed to SP         11000010
opcode 0xC3:                                    "RET"w                      ; Within Segment                            11000011

#ifdef CORE_8086_RET_ALIAS
; RETF (8086 alias of CA-CB)
opcode 0xC8 iw16:                               "RETF"w i
opcode 0xC9:                                    "RETF"w
#endif
; RETF
opcode 0xCA iw16:                               "RETF"w i                   ; Intersegment Adding Immediate to SP       11001010
opcode 0xCB:                                    "RETF"w                     ; Intersegment                              11001011

; SALC
opcode 0xD6:                                    "SALCb"

opcode 0xF6 mod/reg/rm /2:                      "NOT"b b(r/m)               ; Invert                                    1111011w w=0
opcode 0xF7 mod/reg/rm /2:                      "NOT"w w(r/m)               ; Invert                                    1111011w w=1
opcode 0xF6 mod/reg/rm /3:                      "NEG"b b(r/m)               ; Change Sign                               1111011w w=0
opcode 0xF7 mod/reg/rm /3:                      "NEG"w w(r/m)               ; Change Sign                               1111011w w=1
opcode 0xF6 mod/reg/rm /4:                      "MUL"b b(r/m)               ; Multiply (Unsigned)                       1111011w w=0
opcode 0xF7 mod/reg/rm /4:                      "MUL"w w(r/m)               ; Multiply (Unsigned)                       1111011w w=1
opcode 0xF6 mod/reg/rm /5:                      "IMUL"b b(r/m)              ; Integer Multiply (Signed)                 1111011w w=0
opcode 0xF7 mod/reg/rm /5:                      "IMUL"w w(r/m)              ; Integer Multiply (Signed)                 1111011w w=1
opcode 0xF6 mod/reg/rm /6:                      "DIV"b b(r/m)               ; Divide (Unsigned)                         1111011w w=0
opcode 0xF7 mod/reg/rm /6:                      "DIV"w w(r/m)               ; Divide (Unsigned)                         1111011w w=1
opcode 0xF6 mod/reg/rm /7:                      "IDIV"b b(r/m)              ; Integer Divide (Signed)                   1111011w w=0
opcode 0xF7 mod/reg/rm /7:                      "IDIV"w w(r/m)              ; Integer Divide (Signed)                   1111011w w=1

; shift group (GRP2) by 1
opcode 0xD0 mod/reg/rm /0:                      "ROL"b b(r/m),1             ; Rotate Left                               110100vw v=0 w=0
opcode 0xD0 mod/reg/rm /1:                      "ROR"b b(r/m),1             ; Rotate Right                              110100vw v=0 w=0
opcode 0xD0 mod/reg/rm /2:                      "RCL"b b(r/m),1             ; Rotate Through Carry Flag Left            110100vw v=0 w=0
opcode 0xD0 mod/reg/rm /3:                      "RCR"b b(r/m),1             ; Rotate Through Carry Flag Right           110100vw v=0 w=0
opcode 0xD0 mod/reg/rm /4:                      "SHL"b b(r/m),1             ; Shift Logical Left                        110100vw v=0 w=0
opcode 0xD0 mod/reg/rm /5:                      "SHR"b b(r/m),1             ; Shift Logical Right                       110100vw v=0 w=0
opcode 0xD0 mod/reg/rm /6:                      "SAL"b b(r/m),1             ; Shift Arithmetic Left                     110100vw v=0 w=0
opcode 0xD0 mod/reg/rm /7:                      "SAR"b b(r/m),1             ; Shift Arithmetic Right                    110100vw v=0 w=0
opcode 0xD1 mod/reg/rm /0:                      "ROL"w w(r/m),1             ; Rotate Left                               110100vw v=0 w=1
opcode 0xD1 mod/reg/rm /1:                      "ROR"w w(r/m),1             ; Rotate Right                              110100vw v=0 w=1
opcode 0xD1 mod/reg/rm /2:                      "RCL"w w(r/m),1             ; Rotate Through Carry Flag Left            110100vw v=0 w=1
opcode 0xD1 mod/reg/rm /3:                      "RCR"w w(r/m),1             ; Rotate Through Carry Flag Right           110100vw v=0 w=1
opcode 0xD1 mod/reg/rm /4:                      "SHL"w w(r/m),1             ; Shift Logical Left                        110100vw v=0 w=1
opcode 0xD1 mod/reg/rm /5:                      "SHR"w w(r/m),1             ; Shift Logical Right                       110100vw v=0 w=1
opcode 0xD1 mod/reg/rm /6:                      "SAL"w w(r/m),1             ; Shift Arithmetic Left                     110100vw v=0 w=1
opcode 0xD1 mod/reg/rm /7:                      "SAR"w w(r/m),1             ; Shift Arithmetic Right                    110100vw v=0 w=1

; shift group (GRP2) by CL
opcode 0xD2 mod/reg/rm /0:                      "ROL"b b(r/m),b(c)          ; Rotate Left                               110100vw v=1 w=0
opcode 0xD2 mod/reg/rm /1:                      "ROR"b b(r/m),b(c)          ; Rotate Right                              110100vw v=1 w=0
opcode 0xD2 mod/reg/rm /2:                      "RCL"b b(r/m),b(c)          ; Rotate Through Carry Flag Left            110100vw v=1 w=0
opcode 0xD2 mod/reg/rm /3:                      "RCR"b b(r/m),b(c)          ; Rotate Through Carry Flag Right           110100vw v=1 w=0
opcode 0xD2 mod/reg/rm /4:                      "SHL"b b(r/m),b(c)          ; Shift Logical Left                        110100vw v=1 w=0
opcode 0xD2 mod/reg/rm /5:                      "SHR"b b(r/m),b(c)          ; Shift Logical Right                       110100vw v=1 w=0
opcode 0xD2 mod/reg/rm /6:                      "SAL"b b(r/m),b(c)          ; Shift Arithmetic Left                     110100vw v=1 w=0
opcode 0xD2 mod/reg/rm /7:                      "SAR"b b(r/m),b(c)          ; Shift Arithmetic Right                    110100vw v=1 w=0
opcode 0xD3 mod/reg/rm /0:                      "ROL"w w(r/m),b(c)          ; Rotate Left                               110100vw v=1 w=1
opcode 0xD3 mod/reg/rm /1:                      "ROR"w w(r/m),b(c)          ; Rotate Right                              110100vw v=1 w=1
opcode 0xD3 mod/reg/rm /2:                      "RCL"w w(r/m),b(c)          ; Rotate Through Carry Flag Left            110100vw v=1 w=1
opcode 0xD3 mod/reg/rm /3:                      "RCR"w w(r/m),b(c)          ; Rotate Through Carry Flag Right           110100vw v=1 w=1
opcode 0xD3 mod/reg/rm /4:                      "SHL"w w(r/m),b(c)          ; Shift Logical Left                        110100vw v=1 w=1
opcode 0xD3 mod/reg/rm /5:                      "SHR"w w(r/m),b(c)          ; Shift Logical Right                       110100vw v=1 w=1
opcode 0xD3 mod/reg/rm /6:                      "SAL"w w(r/m),b(c)          ; Shift Arithmetic Left                     110100vw v=1 w=1
opcode 0xD3 mod/reg/rm /7:                      "SAR"w w(r/m),b(c)          ; Shift Arithmetic Right                    110100vw v=1 w=1

; segment overrides
opcode prefix 0x26 segoverride(es):             "ES:"
opcode prefix 0x2E segoverride(cs):             "CS:"
opcode prefix 0x36 segoverride(ss):             "SS:"
opcode prefix 0x3E segoverride(ds):             "DS:"

; string ops
opcode 0xA4:                                    "MOVS"b                     ; Move Byte                                 1010010w w=0
opcode 0xA5:                                    "MOVS"w                     ; Move Word                                 1010010w w=1
opcode 0xA6:                                    "CMPS"b                     ; Compare Byte                              1010011w w=0
opcode 0xA7:                                    "CMPS"w                     ; Compare Word                              1010011w w=1
opcode 0xAA:                                    "STOS"b                     ; Store Byte from AL                        1010101w w=0
opcode 0xAB:                                    "STOS"w                     ; Store Word from AX                        1010101w w=1
opcode 0xAC:                                    "LODS"b                     ; Load Byte to AL                           1010110w w=0
opcode 0xAD:                                    "LODS"w                     ; Load Word to AX                           1010110w w=1
opcode 0xAE:                                    "SCAS"b                     ; Scan Byte                                 1010111w w=0
opcode 0xAF:                                    "SCAS"w                     ; Scan Word                                 1010111w w=1

; SBB
opcode 0x18 mod/reg/rm:                         "SBB"b b(r/m),b(reg)        ; Reg/Memory with Register to Either        000110dw d=0 w=0
opcode 0x19 mod/reg/rm:                         "SBB"w w(r/m),w(reg)        ; Reg/Memory with Register to Either        000110dw d=0 w=1
opcode 0x1A mod/reg/rm:                         "SBB"b b(reg),b(r/m)        ; Reg/Memory with Register to Either        000110dw d=1 w=0
opcode 0x1B mod/reg/rm:                         "SBB"w w(reg),w(r/m)        ; Reg/Memory with Register to Either        000110dw d=1 w=1
opcode 0x1C ib:                                 "SBB"b b(a),i               ; Immediate to Accumulator                  0001110w w=0
opcode 0x1D iw:                                 "SBB"w w(a),i               ; Immediate to Accumulator                  0001110w w=1
opcode 0x80 mod/reg/rm /3 ib:                   "SBB"b b(r/m),i             ; Immediate to Register/Memory              100000sw s=0 w=0
opcode 0x81 mod/reg/rm /3 iw:                   "SBB"w w(r/m),i             ; Immediate to Register/Memory              100000sw s=0 w=1
opcode 0x82 mod/reg/rm /3 ib:                   "SBB"b b(r/m),i             ; Immediate to Register/Memory              100000sw s=1 w=0
opcode 0x83 mod/reg/rm /3 ibs:                  "SBB"w w(r/m),i             ; Immediate to Register/Memory              100000sw s=1 w=1

; SUB
opcode 0x28 mod/reg/rm:                         "SUB"b b(r/m),b(reg)        ; Reg/Memory with Register to Either        001010dw d=0 w=0
opcode 0x29 mod/reg/rm:                         "SUB"w w(r/m),w(reg)        ; Reg/Memory with Register to Either        001010dw d=0 w=1
opcode 0x2A mod/reg/rm:                         "SUB"b b(reg),b(r/m)        ; Reg/Memory with Register to Either        001010dw d=1 w=0
opcode 0x2B mod/reg/rm:                         "SUB"w w(reg),w(r/m)        ; Reg/Memory with Register to Either        001010dw d=1 w=1
opcode 0x2C ib:                                 "SUB"b b(a),i               ; Immediate to Accumulator                  0010110w w=0
opcode 0x2D iw:                                 "SUB"w w(a),i               ; Immediate to Accumulator                  0010110w w=1
opcode 0x80 mod/reg/rm /5 ib:                   "SUB"b b(r/m),i             ; Immediate to Register/Memory              100000sw s=0 w=0
opcode 0x81 mod/reg/rm /5 iw:                   "SUB"w w(r/m),i             ; Immediate to Register/Memory              100000sw s=0 w=1
opcode 0x82 mod/reg/rm /5 ib:                   "SUB"b b(r/m),i             ; Immediate to Register/Memory              100000sw s=1 w=0
opcode 0x83 mod/reg/rm /5 ibs:                  "SUB"w w(r/m),i             ; Immediate to Register/Memory              100000sw s=1 w=1

; TEST
opcode 0x84 mod/reg/rm:                         "TEST"b b(r/m),b(reg)       ; Register/Memory and Register              1000010w w=0
opcode 0x85 mod/reg/rm:                         "TEST"w w(r/m),w(reg)       ; Register/Memory and Register              1000010w w=1
opcode 0xA8 ib:                                 "TEST"b b(a),i              ; Immediate Data and Accumulator            1010100w w=0
opcode 0xA9 iw:                                 "TEST"w w(a),i              ; Immediate Data and Accumulator            1010100w w=1
#ifdef CORE_8086_F6_TEST_ALIAS
; 8086 alias
opcode 0xF6 mod/reg/rm /1 ib:                   "TEST"b b(r/m),i            ; Immediate Data and Register/Memory        1111011w w=0
opcode 0xF7 mod/reg/rm /1 iw:                   "TEST"w w(r/m),i            ; Immediate Data and Register/Memory        1111011w w=1
#endif
; misc group (GRP3). some have immediate bytes, some not
opcode 0xF6 mod/reg/rm /0 ib:                   "TEST"b b(r/m),i            ; Immediate Data and Register/Memory        1111011w w=0
opcode 0xF7 mod/reg/rm /0 iw:                   "TEST"w w(r/m),i            ; Immediate Data and Register/Memory        1111011w w=1

; WAIT
opcode 0x9B prefix:                             "WAIT"

; XCHG
opcode 0x86 mod/reg/rm:                         "XCHG"b b(r/m),b(reg)       ; Register/Memory with Register             1000011w w=0
opcode 0x87 mod/reg/rm:                         "XCHG"w w(r/m),w(reg)       ; Register/Memory with Register             1000011w w=1
opcode range(0x91,0x97) reg=op02:               "XCHG"w w(reg),w(a)         ; Register with Accumulator                 10010<reg> reg=1-7
opcode 0x90:                                    "NOP"                       ; Register with Accumulator (AX,AX) aka NOP 10010<reg> reg=0

; XLAT
opcode 0xD7:                                    "XLAT"b                     ; Translate Byte to AL                      11010111

; XOR
opcode 0x30 mod/reg/rm:                         "XOR"b b(r/m),b(reg)        ; Reg/Memory with Register to Either        001100dw d=0 w=0
opcode 0x31 mod/reg/rm:                         "XOR"w w(r/m),w(reg)        ; Reg/Memory with Register to Either        001100dw d=0 w=1
opcode 0x32 mod/reg/rm:                         "XOR"b b(reg),b(r/m)        ; Reg/Memory with Register to Either        001100dw d=1 w=0
opcode 0x33 mod/reg/rm:                         "XOR"w w(reg),w(r/m)        ; Reg/Memory with Register to Either        001100dw d=1 w=1
opcode 0x34 ib:                                 "XOR"b b(a),i               ; Immediate to Accumulator                  0011010w w=0
opcode 0x35 iw:                                 "XOR"w w(a),i               ; Immediate to Accumulator                  0011010w w=1
opcode 0x80 mod/reg/rm /6 ib:                   "XOR"b b(r/m),i             ; Immediate to Register/Memory              100000sw s=0 w=0
opcode 0x81 mod/reg/rm /6 iw:                   "XOR"w w(r/m),i             ; Immediate to Register/Memory              100000sw s=0 w=1
opcode 0x82 mod/reg/rm /6 ib:                   "XOR"b b(r/m),i             ; Immediate to Register/Memory              100000sw s=1 w=0
opcode 0x83 mod/reg/rm /6 ibs:                  "XOR"w w(r/m),i             ; Immediate to Register/Memory              100000sw s=1 w=1

