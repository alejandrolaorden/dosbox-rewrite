
; FADD
opcode 0xD8 mod/reg/rm /0 mod!=3:               "FADD"f32 f32(r/m)      ; FADD [mem]    ST(0) += *((float*)mem)
opcode 0xD8 mod/reg/rm /0 mod==3:               "FADD" st(0),st(r/m)    ; FADD ST(r/m)  ST(0) += ST(r/m)     mod == 3 therefore r/m is register
opcode 0xDA mod/reg/rm /0 mod!=3:               "FADD"w32 w32(r/m)      ; FADD [mem]    ST(0) += *((uint32_t*)mem)
#ifdef CORE_8087_ALIASES
opcode 0xDA mod/reg/rm /0 mod==3:               "FADDP" st(0),st(r/m)   ; FADDP ST(r/m) ST(0) += ST(r/m), POP from top of stack. Useless, replaced in 80387.
#endif
opcode 0xDC mod/reg/rm /0 mod!=3:               "FADD"f64 f64(r/m)      ; FADD [mem]    ST(0) += *((double*)mem)
opcode 0xDC mod/reg/rm /0 mod==3:               "FADD" st(r/m),st(0)    ; FADD ST(r/m)  ST(r/m) += ST(0)
opcode 0xDE mod/reg/rm /0 mod!=3:               "FADD"w16 w16(r/m)      ; FADD [mem]    ST(0) += *((uint16_t*)mem)
opcode 0xDE mod/reg/rm /0 mod==3:               "FADDP" st(r/m),st(0)   ; FADDP ST(r/m) ST(r/m) += ST(0), POP from top of stack.

; FMUL
opcode 0xD8 mod/reg/rm /1 mod!=3:               "FMUL"f32 f32(r/m)      ; FMUL [mem]    ST(0) *= *((float*)mem)
opcode 0xD8 mod/reg/rm /1 mod==3:               "FMUL" st(0),st(r/m)    ; FMUL ST(r/m)  ST(0) *= ST(r/m)     mod == 3 therefore r/m is register
opcode 0xDA mod/reg/rm /1 mod!=3:               "FMUL"w32 w32(r/m)      ; FMUL [mem]    ST(0) *= *((uint32_t*)mem)
#ifdef CORE_8087_ALIASES
opcode 0xDA mod/reg/rm /1 mod==3:               "FMULP" st(0),st(r/m)   ; FMULP ST(r/m) ST(0) *= ST(r/m), POP from top of stack. Useless, replaced in 80387.
#endif
opcode 0xDC mod/reg/rm /1 mod!=3:               "FMUL"f64 f64(r/m)      ; FMUL [mem]    ST(0) *= *((double*)mem)
opcode 0xDC mod/reg/rm /1 mod==3:               "FMUL" st(r/m),st(0)    ; FMUL ST(r/m)  ST(r/m) *= ST(0)
opcode 0xDE mod/reg/rm /1 mod!=3:               "FMUL"w16 w16(r/m)      ; FMUL [mem]    ST(0) *= *((uint16_t*)mem)
opcode 0xDE mod/reg/rm /1 mod==3:               "FMULP" st(r/m),st(0)   ; FMULP ST(r/m) ST(r/m) *= ST(0), POP from top of stack.

; FCOM
opcode 0xD8 mod/reg/rm /2 mod!=3:               "FCOM"f32 f32(r/m)      ; FCOM [mem]    ST(0) == *((float*)mem)
opcode 0xD8 mod/reg/rm /2 mod==3:               "FCOM" st(0),st(r/m)    ; FCOM ST(r/m)  ST(0) == ST(r/m)     mod == 3 therefore r/m is register
opcode 0xDA mod/reg/rm /2 mod!=3:               "FCOM"w32 w32(r/m)      ; FCOM [mem]    ST(0) == *((uint32_t*)mem)
opcode 0xDC mod/reg/rm /2 mod!=3:               "FCOM"f64 f64(r/m)      ; FCOM [mem]    ST(0) == *((double*)mem)
opcode 0xDE mod/reg/rm /2 mod!=3:               "FCOM"w16 w16(r/m)      ; FCOM [mem]    ST(0) == *((uint16_t*)mem)

; FCOMP
opcode 0xD8 mod/reg/rm /3 mod!=3:               "FCOMP"f32 f32(r/m)     ; FCOMP [mem]   ST(0) == *((float*)mem)
opcode 0xD8 mod/reg/rm /3 mod==3:               "FCOMP" st(0),st(r/m)   ; FCOMP ST(r/m) ST(0) == ST(r/m)     mod == 3 therefore r/m is register
opcode 0xDA mod/reg/rm /3 mod!=3:               "FCOMP"w32 w32(r/m)     ; FCOMP [mem]   ST(0) == *((uint32_t*)mem)
opcode 0xDC mod/reg/rm /3 mod!=3:               "FCOMP"f64 f64(r/m)     ; FCOMP [mem]   ST(0) == *((double*)mem)
opcode 0xDE mod/reg/rm /3 mod!=3:               "FCOMP"w16 w16(r/m)     ; FCOMP [mem]   ST(0) == *((uint16_t*)mem)
opcode 0xDE 0xD9:                               "FCOMPP"                ; FCOMPP        ST(0) == ST(1), POP from top of stack

; FSUB
opcode 0xD8 mod/reg/rm /4 mod!=3:               "FSUB"f32 f32(r/m)      ; FSUB [mem]    ST(0) -= *((float*)mem)
opcode 0xD8 mod/reg/rm /4 mod==3:               "FSUB" st(0),st(r/m)    ; FSUB ST(r/m)  ST(0) -= ST(r/m)     mod == 3 therefore r/m is register
opcode 0xDA mod/reg/rm /4 mod!=3:               "FSUB"w32 w32(r/m)      ; FSUB [mem]    ST(0) -= *((uint32_t*)mem)
#ifdef CORE_8087_ALIASES
opcode 0xDA mod/reg/rm /4 mod==3:               "FSUBP" st(0),st(r/m)   ; FSUBP ST(r/m) ST(0) -= ST(r/m), POP from top of stack. Useless, replaced in 80387.
#endif
opcode 0xDC mod/reg/rm /4 mod!=3:               "FSUB"f64 f64(r/m)      ; FSUB [mem]    ST(0) -= *((double*)mem)
opcode 0xDC mod/reg/rm /4 mod==3:               "FSUB" st(r/m),st(0)    ; FSUB ST(r/m)  ST(r/m) -= ST(0)
opcode 0xDE mod/reg/rm /4 mod!=3:               "FSUB"w16 w16(r/m)      ; FSUB [mem]    ST(0) -= *((uint16_t*)mem)
opcode 0xDE mod/reg/rm /4 mod==3:               "FSUBP" st(r/m),st(0)   ; FSUBP ST(r/m) ST(r/m) -= ST(0), POP from top of stack.

; FSUBR
opcode 0xD8 mod/reg/rm /5 mod!=3:               "FSUBR"f32 f32(r/m)     ; FSUBR [mem]    ST(0) -= *((float*)mem)
opcode 0xD8 mod/reg/rm /5 mod==3:               "FSUBR" st(0),st(r/m)   ; FSUBR ST(r/m)  ST(0) -= ST(r/m)     mod == 3 therefore r/m is register
opcode 0xDA mod/reg/rm /5 mod!=3:               "FSUBR"w32 w32(r/m)     ; FSUBR [mem]    ST(0) -= *((uint32_t*)mem)
#ifdef CORE_8087_ALIASES
opcode 0xDA mod/reg/rm /5 mod==3:               "FSUBRP" st(0),st(r/m)  ; FSUBRP ST(r/m) ST(0) -= ST(r/m), POP from top of stack. Useless, replaced in 80387.
#endif
opcode 0xDC mod/reg/rm /5 mod!=3:               "FSUBR"f64 f64(r/m)     ; FSUBR [mem]    ST(0) -= *((double*)mem)
opcode 0xDC mod/reg/rm /5 mod==3:               "FSUBR" st(r/m),st(0)   ; FSUBR ST(r/m)  ST(r/m) -= ST(0)
opcode 0xDE mod/reg/rm /5 mod!=3:               "FSUBR"w16 w16(r/m)     ; FSUBR [mem]    ST(0) -= *((uint16_t*)mem)
opcode 0xDE mod/reg/rm /5 mod==3:               "FSUBRP" st(r/m),st(0)  ; FSUBRP ST(r/m) ST(r/m) -= ST(0), POP from top of stack.

; FDIV
opcode 0xD8 mod/reg/rm /6 mod!=3:               "FDIV"f32 f32(r/m)      ; FDIV [mem]    ST(0) /= *((float*)mem)
opcode 0xD8 mod/reg/rm /6 mod==3:               "FDIV" st(0),st(r/m)    ; FDIV ST(r/m)  ST(0) /= ST(r/m)     mod == 3 therefore r/m is register
opcode 0xDA mod/reg/rm /6 mod!=3:               "FDIV"w32 w32(r/m)      ; FDIV [mem]    ST(0) /= *((uint32_t*)mem)
#ifdef CORE_8087_ALIASES
opcode 0xDA mod/reg/rm /6 mod==3:               "FDIVP" st(0),st(r/m)   ; FDIVP ST(r/m) ST(0) /= ST(r/m), POP from top of stack. Useless, replaced in 80387.
#endif
opcode 0xDC mod/reg/rm /6 mod!=3:               "FDIV"f64 f64(r/m)      ; FDIV [mem]    ST(0) /= *((double*)mem)
opcode 0xDC mod/reg/rm /6 mod==3:               "FDIV" st(r/m),st(0)    ; FDIV ST(r/m)  ST(r/m) /= ST(0)
opcode 0xDE mod/reg/rm /6 mod!=3:               "FDIV"w16 w16(r/m)      ; FDIV [mem]    ST(0) /= *((uint16_t*)mem)
opcode 0xDE mod/reg/rm /6 mod==3:               "FDIVP" st(r/m),st(0)   ; FDIVP ST(r/m) ST(r/m) /= ST(0), POP from top of stack.

; FDIVR
opcode 0xD8 mod/reg/rm /7 mod!=3:               "FDIVR"f32 f32(r/m)     ; FDIVR [mem]    ST(0) /= *((float*)mem)
opcode 0xD8 mod/reg/rm /7 mod==3:               "FDIVR" st(0),st(r/m)   ; FDIVR ST(r/m)  ST(0) /= ST(r/m)     mod == 3 therefore r/m is register
opcode 0xDA mod/reg/rm /7 mod!=3:               "FDIVR"w32 w32(r/m)     ; FDIVR [mem]    ST(0) /= *((uint32_t*)mem)
#ifdef CORE_8087_ALIASES
opcode 0xDA mod/reg/rm /7 mod==3:               "FDIVRP" st(0),st(r/m)  ; FDIVRP ST(r/m) ST(0) /= ST(r/m), POP from top of stack. Useless, replaced in 80387.
#endif
opcode 0xDC mod/reg/rm /7 mod!=3:               "FDIVR"f64 f64(r/m)     ; FDIVR [mem]    ST(0) /= *((double*)mem)
opcode 0xDC mod/reg/rm /7 mod==3:               "FDIVR" st(r/m),st(0)   ; FDIVR ST(r/m)  ST(r/m) /= ST(0)
opcode 0xDE mod/reg/rm /7 mod!=3:               "FDIVR"w16 w16(r/m)     ; FDIVR [mem]    ST(0) /= *((uint16_t*)mem)
opcode 0xDE mod/reg/rm /7 mod==3:               "FDIVRP" st(r/m),st(0)  ; FDIVRP ST(r/m) ST(r/m) /= ST(0), POP from top of stack.

; FLD
opcode 0xD9 mod/reg/rm /0 mod!=3:               "FLD"f32 f32(r/m)       ; FLD [mem]    ST(0) = *((float*)mem)
opcode 0xD9 mod/reg/rm /0 mod==3:               "FLD" st(0),st(r/m)     ; FLD ST(r/m)  ST(0) = ST(r/m)     mod == 3 therefore r/m is register
opcode 0xD9 0xE8:                               "FLD1"
opcode 0xD9 0xE9:                               "FLD2L2T"
opcode 0xD9 0xEA:                               "FLD2L2E"
opcode 0xD9 0xEB:                               "FLDPI"
opcode 0xD9 0xEC:                               "FLDLG2"
opcode 0xD9 0xED:                               "FLDLN2"
opcode 0xD9 0xEE:                               "FLDZ"
opcode 0xDB mod/reg/rm /0 mod!=3:               "FLD"w32 w32(r/m)       ; FLD [mem]    ST(0) = *((uint32_t*)mem)
opcode 0xDB mod/reg/rm /5 mod!=3:               "FLD"f80 f80(r/m)       ; FLD [mem]    ST(0) = *((long double*)mem)
opcode 0xDD mod/reg/rm /0 mod!=3:               "FLD"f64 f64(r/m)       ; FLD [mem]    ST(0) = *((double*)mem)
opcode 0xDF mod/reg/rm /0 mod!=3:               "FLD"w16 w16(r/m)       ; FLD [mem]    ST(0) = *((uint16_t*)mem)
opcode 0xDF mod/reg/rm /4 mod!=3:               "FLD"fbcd fbcd(r/m)     ; FLD [mem]    ST(0) = ... um, what would you call it?
opcode 0xDF mod/reg/rm /5 mod!=3:               "FLD"w64 w64(r/m)       ; FLD [mem]    ST(0) = *((uint64_t*)mem)

; FST
opcode 0xD9 mod/reg/rm /2 mod!=3:               "FST"f32 f32(r/m)       ; FST [mem]     *((float*)mem) = ST(0)
opcode 0xDB mod/reg/rm /2 mod!=3:               "FST"w32 w32(r/m)       ; FST [mem]     *((uint32_t*)mem) = ST(0)
opcode 0xDD mod/reg/rm /2 mod!=3:               "FST"f64 f64(r/m)       ; FST [mem]     *((double*)mem) = ST(0)
opcode 0xDD mod/reg/rm /2 mod==3:               "FST" st(r/m)           ; FST ST(r/m)   ST(r/m) = ST(0)
opcode 0xDF mod/reg/rm /2 mod!=3:               "FST"w16 w16(r/m)       ; FST [mem]     *((uint16_t*)mem) = ST(0)

; FSTP
opcode 0xD9 mod/reg/rm /3 mod!=3:               "FSTP"f32 f32(r/m)      ; FSTP [mem]    *((float*)mem) = ST(0), POP
opcode 0xDB mod/reg/rm /3 mod!=3:               "FSTP"w32 w32(r/m)      ; FSTP [mem]    *((uint32_t*)mem) = ST(0), POP
opcode 0xDB mod/reg/rm /7 mod!=3:               "FSTP"f80 f80(r/m)      ; FSTP [mem]    *((long double*)mem) = ST(0), POP
opcode 0xDD mod/reg/rm /3 mod!=3:               "FSTP"f64 f64(r/m)      ; FSTP [mem]    *((double*)mem) = ST(0), POP
opcode 0xDD mod/reg/rm /3 mod==3:               "FSTP" st(r/m)          ; FSTP ST(r/m)  ST(r/m) = ST(0), POP
opcode 0xDF mod/reg/rm /3 mod!=3:               "FSTP"w16 w16(r/m)      ; FSTP [mem]    *((uint16_t*)mem) = ST(0), POP
opcode 0xDF mod/reg/rm /6 mod!=3:               "FSTP"fbcd fbcd(r/m)    ; FSTP [mem]    *mem = ST(0), POP
opcode 0xDF mod/reg/rm /7 mod!=3:               "FSTP"w64 w64(r/m)      ; FSTP [mem]    *((uint64_t)mem) = ST(0), POP

; FPU env
opcode 0xD9 mod/reg/rm /7 mod!=3:               "FSTCW"w w16(r/m)       ; FSTCW [mem]
opcode 0xD9 mod/reg/rm /6 mod!=3:               "FSTENV" fenv(r/m)      ; FSTENV [mem]
opcode 0xD9 mod/reg/rm /5 mod!=3:               "FLDCW" w16(r/m)        ; FLDCW [mem]
opcode 0xD9 mod/reg/rm /4 mod!=3:               "FLDENV" fenv(r/m)      ; FLDENV [mem]
opcode 0xDD mod/reg/rm /4 mod!=3:               "FRSTOR" fstate(r/m)    ; FRSTOR [mem]
opcode 0xDD mod/reg/rm /6 mod!=3:               "FSAVE" fstate(r/m)     ; FSAVE [mem]
opcode 0xDD mod/reg/rm /7 mod!=3:               "FSTSW" w16(r/m)        ; FSTSW [mem]

; FXCH
opcode 0xD9 mod/reg/rm /1 mod==3:               "FXCH" st(r/m)          ; FXCH ST(r/m)

; Other FPU opcodes
opcode 0xDD mod/reg/rm /0 mod==3:               "FFREE" st(r/m)         ; FFREE ST(r/m)
opcode 0xDB 0xE3:                               "FINIT"
opcode 0xDB 0xE2:                               "FCLEX"
opcode 0xDB 0xE1:                               "FDISI"
opcode 0xDB 0xE0:                               "FENI"
opcode 0xD9 0xFD:                               "FSCALE"
opcode 0xD9 0xFC:                               "FRNDINT"
opcode 0xD9 0xFA:                               "FSQRT"
opcode 0xD9 0xF9:                               "FYL2XP1"
opcode 0xD9 0xF8:                               "FPREM"
opcode 0xD9 0xF7:                               "FINCSTP"
opcode 0xD9 0xF6:                               "FDECSTP"
opcode 0xD9 0xF4:                               "FXTRACT"
opcode 0xD9 0xF3:                               "FPATAN"
opcode 0xD9 0xF2:                               "FPTAN"
opcode 0xD9 0xF1:                               "FYL2X"
opcode 0xD9 0xF0:                               "F2XM1"
opcode 0xD9 0xE5:                               "FXAM"
opcode 0xD9 0xE4:                               "FTST"
opcode 0xD9 0xE1:                               "FABS"
opcode 0xD9 0xE0:                               "FCHS"
opcode 0xD9 0xD0:                               "FNOP"

