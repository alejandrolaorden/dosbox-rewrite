; NOTE: This is where Intel gets weird.
;
;       MMX instructions work as normal but when prefixed with a "Mandatory prefix" like 0xF3 (REP), 0xF2 (REPNE), or 0x66
;       they become SSE instructions or a different instruction that decodes SORT OF the same.
;       Suddenly our big switch statement has to decide whether prefixes work as they do or if they switch elsewhere based
;       on the next byte. But at least, theres only one "Mandatory prefix" and/or 0x66.
;
;       The second difference is that prefix 0x66 must be present to select SSE from MMX, even in 32-bit code. Its not
;       a toggle like 32-bit register access. Running as 32-bit code automatically selects SSE.

; Pentium III

; MOVUPS
opcode 0x0F 0x10 mod/reg/rm:                    "MOVUPS" sse(reg),sse(r/m)  ; Move Unaligned Packed Single-FP Values
opcode 0x0F 0x10 mod/reg/rm mprefix(0xF3):      "MOVSS" sse(reg),sse(r/m)   ; Move Scalar Single-FP Values
opcode 0x0F 0x11 mod/reg/rm:                    "MOVUPS" sse(r/m),sse(reg)  ; Move Unaligned Packed Single-FP Values
opcode 0x0F 0x11 mod/reg/rm mprefix(0xF3):      "MOVSS" sse(r/m),sse(reg)   ; Move Scalar Single-FP Values

; MOVLPS/MOVHLPS
opcode 0x0F 0x12 mod/reg/rm mod==3:             "MOVHLPS" sse(reg),sse(r/m) ; Move Packed Single-Precision Floating-Point Values High to Low
opcode 0x0F 0x12 mod/reg/rm mod!=3:             "MOVLPS" sse(reg),sse(r/m)  ; Move Low Packed Single-Precision Floating-Point Values
opcode 0x0F 0x13 mod/reg/rm mod!=3:             "MOVLPS" sse(r/m),sse(reg)  ; Move Low Packed Single-Precision Floating-Point Values

; UNPCKLPS
opcode 0x0F 0x14 mod/reg/rm:                    "UNPCKLPS" sse(reg),sse(r/m); Unpack and Interleave Low Packed Single-FP Values
opcode 0x0F 0x15 mod/reg/rm:                    "UNPCKHPS" sse(reg),sse(r/m); Unpack and Interleave High Packed Single-FP Values
opcode 0x0F 0x16 mod/reg/rm mod==3:             "MOVLHPS" sse(reg),sse(r/m) ; Move Packed Single-FP Values Low to High
opcode 0x0F 0x16 mod/reg/rm mod!=3:             "MOVHPS" sse(reg),sse(r/m)  ; Move High Packed Single-FP Values
opcode 0x0F 0x17 mod/reg/rm mod!=3:             "MOVHPS" sse(r/m),sse(reg)  ; Move High Packed Single-FP Values

; PREFETCH
opcode 0x0F 0x18 mod/reg/rm /0 mod!=3:          "PREFETCHNTA" b(r/m)        ; Prefetch Data Into Caches
opcode 0x0F 0x18 mod/reg/rm /1 mod!=3:          "PREFETCHT0" b(r/m)         ; Prefetch Data Into Caches
opcode 0x0F 0x18 mod/reg/rm /2 mod!=3:          "PREFETCHT1" b(r/m)         ; Prefetch Data Into Caches
opcode 0x0F 0x18 mod/reg/rm /3 mod!=3:          "PREFETCHT2" b(r/m)         ; Prefetch Data Into Caches

; MOVAPS...
opcode 0x0F 0x28 mod/reg/rm:                    "MOVAPS" sse(reg),sse(r/m)  ; Move Aligned Packed Single-FP Values
opcode 0x0F 0x29 mod/reg/rm:                    "MOVAPS" sse(r/m),sse(reg)  ; Move Aligned Packed Single-FP Values
opcode 0x0F 0x2A mod/reg/rm:                    "CVTPI2PS" sse(reg),mmx(r/m); Convert Packed DW Integers to Single-FP Values
opcode 0x0F 0x2A mod/reg/rm mprefix(0xF3):      "CVTSI2SS" sse(reg),w32(r/m); Convert DW Integer to Scalar Single-FP Value
opcode 0x0F 0x2B mod/reg/rm mod!=3:             "MOVNTPS" sse(r/m),sse(reg) ; Store Packed Single-FP Values Using Non-Temporal Hint
opcode 0x0F 0x2C mod/reg/rm:                    "CVTTPS2PI" mmx(reg),sse(r/m);Convert with Trunc. Packed Single-FP Values to DW Integers
opcode 0x0F 0x2C mod/reg/rm mprefix(0xF3):      "CVTTSS2SI" w32(reg),sse(r/m);Convert with Trunc. Scalar Single-FP Value to DW Integer
opcode 0x0F 0x2D mod/reg/rm:                    "CVTPS2PI" mmx(reg),sse(r/m); Convert Packed Single-FP Values to DW Integers
opcode 0x0F 0x2D mod/reg/rm mprefix(0xF3):      "CVTSS2SI" w32(reg),sse(r/m); Convert Scalar Single-FP Value to DW Integer
opcode 0x0F 0x2E mod/reg/rm:                    "UCOMISS" sse(reg),sse(r/m) ; Unordered Compare Scalar Single-FP Values and Set EFLAGS
opcode 0x0F 0x2F mod/reg/rm:                    "COMISS" sse(reg),sse(r/m)  ; Compare Scalar Ordered Single-FP Values and Set EFLAGS

; MOVMSK...
opcode 0x0F 0x50 mod/reg/rm mod==3:             "MOVMSKPS" w32(reg),sse(r/m); Extract Packed Single-FP Sign Mask
opcode 0x0F 0x51 mod/reg/rm:                    "SQRTPS" sse(reg),sse(r/m)  ; Compute Square Roots of Packed Single-FP Values
opcode 0x0F 0x51 mod/reg/rm mprefix(0xF3):      "SQRTSS" sse(reg),sse(r/m)  ; Compute Square Root of Scalar Single-FP Value
opcode 0x0F 0x52 mod/reg/rm:                    "RSQRTPS" sse(reg),sse(r/m) ; Compute Recipr. of Square Roots of Packed Single-FP Values
opcode 0x0F 0x52 mod/reg/rm mprefix(0xF3):      "RSQRTSS" sse(reg),sse(r/m) ; Compute Recipr. of Square Root of Packed Single-FP Value
opcode 0x0F 0x53 mod/reg/rm:                    "RCPPS" sse(reg),sse(r/m)   ; Compute Reciprocals of Packed Single-FP Values
opcode 0x0F 0x53 mod/reg/rm mprefix(0xF3):      "RCPSS" sse(reg),sse(r/m)   ; Compute Reciprocal of Scalar Single-FP Values
opcode 0x0F 0x54 mod/reg/rm:                    "ANDPS" sse(reg),sse(r/m)   ; 
opcode 0x0F 0x55 mod/reg/rm:                    "ANDNPS" sse(reg),sse(r/m)  ; 
opcode 0x0F 0x56 mod/reg/rm:                    "ORPS" sse(reg),sse(r/m)    ; 
opcode 0x0F 0x57 mod/reg/rm:                    "XORPS" sse(reg),sse(r/m)   ; 
opcode 0x0F 0x58 mod/reg/rm:                    "ADDPS" sse(reg),sse(r/m)   ; 
opcode 0x0F 0x58 mod/reg/rm mprefix(0xF3):      "ADDSS" sse(reg),sse(r/m)   ; 
opcode 0x0F 0x59 mod/reg/rm:                    "MULPS" sse(reg),sse(r/m)   ; 
opcode 0x0F 0x59 mod/reg/rm mprefix(0xF3):      "MULSS" sse(reg),sse(r/m)   ; 
opcode 0x0F 0x5C mod/reg/rm:                    "SUBPS" sse(reg),sse(r/m)   ; 
opcode 0x0F 0x5C mod/reg/rm mprefix(0xF3):      "SUBSS" sse(reg),sse(r/m)   ; 
opcode 0x0F 0x5D mod/reg/rm:                    "MINPS" sse(reg),sse(r/m)   ; 
opcode 0x0F 0x5D mod/reg/rm mprefix(0xF3):      "MINSS" sse(reg),sse(r/m)   ; 
opcode 0x0F 0x5E mod/reg/rm:                    "DIVPS" sse(reg),sse(r/m)   ; 
opcode 0x0F 0x5E mod/reg/rm mprefix(0xF3):      "DIVSS" sse(reg),sse(r/m)   ; 
opcode 0x0F 0x5F mod/reg/rm:                    "MAXPS" sse(reg),sse(r/m)   ; 
opcode 0x0F 0x5F mod/reg/rm mprefix(0xF3):      "MAXSS" sse(reg),sse(r/m)   ; 
opcode 0x0F 0x70 mod/reg/rm ib:                 "PSHUFW" mmx(reg),mmx(r/m)  ; 

; MXCSR
opcode 0x0F 0xAE mod/reg/rm /2 mod!=3:          "LDMXCSR" w(r/m)            ; 
opcode 0x0F 0xAE mod/reg/rm /3 mod!=3:          "STMXCSR" w(r/m)            ; 

; more
opcode 0x0F 0xAE mod/reg/rm /7 mod==3:          "SFENCE"                    ; 

; CMPSS..
opcode 0x0F 0xC2 mod/reg/rm ib:                 "CMPPS" sse(reg),sse(r/m),i ; 
opcode 0x0F 0xC2 mod/reg/rm ib mprefix(0xF3):   "CMPSS" sse(reg),sse(r/m),i ; 

; more
opcode 0x0F 0xC4 mod/reg/rm ib mod==3:          "PINSRW" mmx(reg),w32(r/m),i; 
opcode 0x0F 0xC4 mod/reg/rm ib mod!=3:          "PINSRW" mmx(reg),w16(r/m),i; 
opcode 0x0F 0xC4 mod/reg/rm ib mod==3 mprefix(0x66):"PINSRW" sse(reg),w32(r/m),i; 
opcode 0x0F 0xC4 mod/reg/rm ib mod!=3 mprefix(0x66):"PINSRW" sse(reg),w16(r/m),i; 
opcode 0x0F 0xC5 mod/reg/rm ib mod==3:          "PEXTRW" w32(reg),mmx(r/m),i; 
opcode 0x0F 0xC5 mod/reg/rm ib mod==3 mprefix(0x66):"PEXTRW" w32(reg),sse(r/m),i; 
opcode 0x0F 0xC6 mod/reg/rm ib:                 "SHUFPS" sse(reg),sse(r/m),i; 
opcode 0x0F 0xD7 mod/reg/rm mod==3:             "PMOVMSKB" w32(reg),mmx(r/m); 
opcode 0x0F 0xDA mod/reg/rm:                    "PMINUB" mmx(reg),mmx(r/m)  ; 
opcode 0x0F 0xDE mod/reg/rm:                    "PMAXUB" mmx(reg),mmx(r/m)  ; 
opcode 0x0F 0xE0 mod/reg/rm:                    "PAVGB" mmx(reg),mmx(r/m)   ; 
opcode 0x0F 0xE3 mod/reg/rm:                    "PAVGW" mmx(reg),mmx(r/m)   ; 
opcode 0x0F 0xE4 mod/reg/rm:                    "PMULHUW" mmx(reg),mmx(r/m) ; 
opcode 0x0F 0xE7 mod/reg/rm mod!=3:             "MOVNTQ" mmx(r/m),mmx(reg)  ; 
opcode 0x0F 0xEA mod/reg/rm:                    "PMINSW" mmx(reg),mmx(r/m)  ; 
opcode 0x0F 0xEE mod/reg/rm:                    "PMAXSW" mmx(reg),mmx(r/m)  ; 
opcode 0x0F 0xF6 mod/reg/rm:                    "PSADBW" mmx(reg),mmx(r/m)  ; 
opcode 0x0F 0xF7 mod/reg/rm mod==3:             "MASKMOVQ" mmx(reg),mmx(r/m); 

